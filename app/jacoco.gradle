
/**
 *
 * [Android開発のテストカバー率取得にはこのツールを使い分けると良いという話 - Qiita]
 * https://qiita.com/keidroid/items/adc4f065b84d8a2cd17a
 *
 * [Code Coverage for Android Testing | Rally Health]
 * https://www.rallyhealth.com/coding/code-coverage-for-android-testing
 *
 **/

apply plugin: 'com.hiya.jacoco-android'

jacoco {
    toolVersion = "0.8.4" // specify Jacoco version
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    xml.enabled false
    html.enabled true
}

android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize() //ex. ProdDebug
    def realVariantName = variant.name //ex. prodDebug

    if (variant.buildType.name != "debug") {
        return
    }

    task("jacoco${variantName}TestReport", type: JacocoReport) {
        // Merge coverage result of unit test and ui test
        dependsOn "create${variantName}CoverageReport"
        dependsOn "test${variantName}UnitTest"

        group = "testing"
        description = "Generate Jacoco coverage reports for ${realVariantName}"

        reports {
            xml.enabled = false
            html.enabled = true
        }

        // Set filter to ignore by file name
        def fileFilter = ['**/R.class',
                          '**/R$*.class',
                          '**/BuildConfig.*',
                          '**/Manifest*.*',
                          'android/**/*.*',
                          'androidx/**/*.*',
                          '**/Lambda$*.class',
                          '**/Lambda.class',
                          '**/*Lambda.class',
                          '**/*Lambda*.class',
                          '**/*Lambda*.*',
                          '**/*Builder.*'
        ]
        def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/javac/${realVariantName}/compile${variantName}JavaWithJavac/classes", excludes: fileFilter)
        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${realVariantName}", excludes: fileFilter)

        def mainSrc = "${project.projectDir}/src/main/java"

        getSourceDirectories().setFrom(files([mainSrc]))
        // Handle both Java and Kotlin files
        getClassDirectories().setFrom(files([javaDebugTree, kotlinDebugTree]))
        getExecutionData().setFrom(fileTree(dir: project.projectDir, includes: [
                '**/*.exec',    //JUnit Test(unit test) Result
                '**/*.ec'])     //Espresso(ui test) Test Result
        )
    }
}